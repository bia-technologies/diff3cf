///////////////////////////////////////////////////////////////////
//
// Модуль разбора файлов конфигурации 
//
// (с) BIA Technologies, LLC	
//
///////////////////////////////////////////////////////////////////

Перем РасширениеПуть;

// Функция возвращает префикс расширения
//
// Параметры:
//   ИмяФайлаКонфигурации - Строка - Полное имя файла configuration.xml расширения
//
// Возвращаемое значение:
//   Строка - префикс расширения
//
Функция ПрочитатьПрефиксРасширения(ИмяФайлаКонфигурации) Экспорт

	Результат = "";

	ФайлОписания = Новый ТекстовыйДокумент;
	ФайлОписания.Прочитать(ИмяФайлаКонфигурации, КодировкаТекста.UTF8NoBOM);
	ТекстОписания = ФайлОписания.ПолучитьТекст();

	ПаттернПрефикса = "<NamePrefix>([\w\W]*?)<\/NamePrefix>";

	Регексп = Новый РегулярноеВыражение(ПаттернПрефикса);
	Регексп.Многострочный = Истина;
	Регексп.ИгнорироватьРегистр = Истина;

	НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		Результат = НайденнаяСтрока.Группы[1].Значение;

	КонецЦикла;

	Возврат Результат;

КонецФункции

// возвращает массив описаний методов файла bsl
//
// Параметры:
//   ФайлМодуля - Файл - Файл BSL, методы которого нужно получить
//   Префикс - Строка - Префикс используемого расширения
//
// Возвращаемое значение:
//   Массив - массив структур, результат разбора метода на модули
//
Функция ПрочитатьМетодыМодуля(ФайлМодуля, Префикс = "") Экспорт

	Результат = Новый Массив();

	ФайлОписания = Новый ТекстовыйДокумент;
	ФайлОписания.Прочитать(ФайлМодуля.ПолноеИмя, КодировкаТекста.UTF8NoBOM);
	ТекстОписания = ФайлОписания.ПолучитьТекст();
	
	ПаттернМетода = "^[\s]*?(Процедура|Функция)[\s]*([\w\W]*?[\(])[\w\W]*?(КонецПроцедуры|КонецФункции)";

	Регексп = Новый РегулярноеВыражение(ПаттернМетода);
	Регексп.Многострочный = Истина;
	Регексп.ИгнорироватьРегистр = Истина;

	НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);

	Директивы = ПолучитьДирективыМетодов(ФайлМодуля);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		ТипМетода = НайденнаяСтрока.Группы[1].Значение;
		ИмяМетода = СокрЛП(СтрЗаменить(НайденнаяСтрока.Группы[2].Значение, "(", ""));

		ДирективаМетода = Директивы[ИмяМетода];
		Директива = "";
		ИмяМетодаБезПрефикса = ИмяМетода;
		ДлинаПередПосле = 5; // длина слов 'Перед' и 'После'
		ДлинаВместо = 6; // длина слова 'Вместо'
		ДлинаИзменениеИКонтроль = 18; // длина слова 'ИзменениеИКонтроль'
		
		Если ДирективаМетода <> Неопределено Тогда
			ИмяМетодаБезПрефикса = ДирективаМетода.ИмяМетода;
			Директива = ДирективаМетода.Директива;
		ИначеЕсли Не ПустаяСтрока(Префикс) Тогда
			ИмяМетодаБезПрефикса = ?(СтрНачинаетсяС(ИмяМетода, Префикс), Сред(ИмяМетода, СтрДлина(Префикс) + 1), ИмяМетода);
			Если СтрЗаканчиваетсяНа(ВРег(ИмяМетодаБезПрефикса), ВРег("Перед")) 
					ИЛИ СтрЗаканчиваетсяНа(ВРег(ИмяМетодаБезПрефикса), ВРег("После")) Тогда
				Директива = Прав(ИмяМетодаБезПрефикса, ДлинаПередПосле);
				ИмяМетодаБезПрефикса = Лев(ИмяМетодаБезПрефикса, СтрДлина(ИмяМетодаБезПрефикса) - ДлинаПередПосле);
			ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ИмяМетодаБезПрефикса), ВРег("Вместо")) Тогда
				Директива = Прав(ИмяМетодаБезПрефикса, ДлинаВместо);
				ИмяМетодаБезПрефикса = Лев(ИмяМетодаБезПрефикса, СтрДлина(ИмяМетодаБезПрефикса) - ДлинаВместо);
			ИначеЕсли СтрЗаканчиваетсяНа(ВРег(ИмяМетодаБезПрефикса), ВРег("ИзменениеИКонтроль")) Тогда
				Директива = Прав(ИмяМетодаБезПрефикса, ДлинаИзменениеИКонтроль);
				ИмяМетодаБезПрефикса = Лев(ИмяМетодаБезПрефикса, СтрДлина(ИмяМетодаБезПрефикса) - ДлинаИзменениеИКонтроль);
			КонецЕсли;
		КонецЕсли;

		ТелоМетода = ?(Директива = "", "", "&" + Директива + Символы.ПС) + 
			СокрЛП(НайденнаяСтрока.Группы[0].Значение);

		Результат.Добавить(СтандартнаяСтруктураРезультата(ТипМетода, ИмяМетода, ИмяМетодаБезПрефикса, ТелоМетода));

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция СтандартнаяСтруктураРезультата(ТипМетода, ИмяМетода, ИмяМетодаБезПрефикса, ТелоМетода)
	
	Результат = Новый Структура();
	Результат.Вставить("ТипМетода", ТипМетода);
	Результат.Вставить("ИмяМетода", ИмяМетода);
	Результат.Вставить("ИмяМетодаБезПрефикса", ИмяМетодаБезПрефикса);
	Результат.Вставить("ТелоМетода", ТелоМетода);

	Возврат Результат;

КонецФункции

Функция ПолучитьДирективыМетодов(ФайлМодуля)

	Результат = Новый Соответствие;

	ФайлОписания = Новый ТекстовыйДокумент;
	ФайлОписания.Прочитать(ФайлМодуля.ПолноеИмя, КодировкаТекста.UTF8NoBOM);
	ТекстОписания = ФайлОписания.ПолучитьТекст();

	ПаттернМетода = "^[\s]*?\&(Перед|Вместо|После|ИзменениеИКонтроль)[\s]*\(\""([\w\W]*?)\""\)*\s(?:Процедура|Функция)[\s]*([\w\W]*?)[\(]";

	Регексп = Новый РегулярноеВыражение(ПаттернМетода);
	Регексп.Многострочный = Истина;
	Регексп.ИгнорироватьРегистр = Истина;

	НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		Результат.Вставить(
			НайденнаяСтрока.Группы[3].Значение,
			Новый Структура("Директива, ИмяМетода",
				НайденнаяСтрока.Группы[1].Значение,
				НайденнаяСтрока.Группы[2].Значение
			)
		);

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает массив структур с описанием переопределенных объектов
//
// Возвращаемое значение:
//   Массив - массив структур с описанием предопределенных объектов
//
Функция ПолучитьПереопределенныеОбъекты() Экспорт

	Результат = Новый Массив();

	Для Каждого ТипОбъектов Из ТипыОбъектов.ОбъектыКонфигурации Цикл

		ФайлыОбъектов = ПолучитьФайлыОбъектов(ТипОбъектов);

		РезультатОбъекты = Новый Массив();

		Для Каждого ФайлОбъекта Из ФайлыОбъектов Цикл

			ДобавитьПереопределенныйОбъект(ТипОбъектов, ФайлОбъекта, РезультатОбъекты);

		КонецЦикла;

		Результат.Добавить(Новый Структура("Тип, Объекты", ТипОбъектов, РезультатОбъекты));

	КонецЦикла;

	Возврат Результат;

КонецФункции

// Получает методы конфигурации и сопоставляет с методами расширения для переопределенных объектов
//
// Параметры:
//   ФайлМодуляРасширения - Файл - Файл модуля расширения
//   ФайлМодуля - Структура - Свойства файла модуля, включая его методы, сюда добавляется сопостовление методов
//   ОсновнаяКонфигурацияПуть - Строка - Расположение основной конфигурации
//   ИмяКонфигурации - Строка - Имя (роль) конфигурации (например: "Родитель" или "Поставка")
//
Процедура ПрочитатьМетодыОсновнойКонфигурации(
			ФайлМодуляРасширения, 
			ФайлМодуля, 
			ОсновнаяКонфигурацияПуть, 
			ИмяКонфигурации) Экспорт

	ИмяФайлаМодуляКонфигурации = "";
	Если ФайлМодуля.Свойство("ИмяПереопределяемого", ИмяФайлаМодуляКонфигурации) Тогда
		ИмяФайлаМодуляКонфигурации = ОбъединитьПути(ОсновнаяКонфигурацияПуть, ИмяФайлаМодуляКонфигурации);
	Иначе
		ИмяФайлаМодуляКонфигурации = ОбъединитьПути(
			ОсновнаяКонфигурацияПуть,
			Сред(ФайлМодуляРасширения.ПолноеИмя, СтрДлина(РасширениеПуть) + 1)
		);
	КонецЕсли;

	ФайлМодуляКонфигурации = Новый Файл(ИмяФайлаМодуляКонфигурации);

	ФайлМодуля.Вставить(ИмяКонфигурации, ФайлМодуляКонфигурации.Существует());
	
	Если ФайлМодуля[ИмяКонфигурации] Тогда

		СопоставитьМетодыРасширенияИКонфигурации(ПрочитатьМетодыМодуля(ФайлМодуляКонфигурации), ФайлМодуля, ИмяКонфигурации);

	КонецЕсли;

КонецПроцедуры

// Устанавливает значение переменной "РасширениеПуть"
//
Процедура УстановитьПуть(Путь) Экспорт

	РасширениеПуть = Путь;

КонецПроцедуры

// Получает файлы объектов расширения
//
// Возвращаемое значение:
//   Массив - массив файлов XML
//
Функция ПолучитьФайлыОбъектов(ТипОбъектов) Экспорт

	КаталогОбъектов = ОбъединитьПути(РасширениеПуть, ТипОбъектов);
	Файлы = НайтиФайлы(КаталогОбъектов, "*.xml");
	
	Возврат Файлы;

КонецФункции

// Получает файлы модулей расширения
//
// Возвращаемое значение:
//   Массив - массив файлов BSL
//
Функция ПолучитьФайлыМодулей(ТипОбъектов, ИмяОбъекта) Экспорт

	КаталогОбъектов = ОбъединитьПути(РасширениеПуть, ТипОбъектов, ИмяОбъекта);
	Файлы = НайтиФайлы(КаталогОбъектов, "*.bsl", Истина);
	
	Возврат Файлы;

КонецФункции

///////////////////////////////////////////////////////////////////

Функция ПрочитатьНаследованиеОбъекта(ФайлОбъекта)

	Результат = Новый Структура("Наследование, Значение", Ложь, "");

	ФайлОписания = Новый ТекстовыйДокумент;
	ФайлОписания.Прочитать(ФайлОбъекта.ПолноеИмя, КодировкаТекста.UTF8NoBOM);
	ТекстОписания = ФайлОписания.ПолучитьТекст();
	
	ПаттернНаследование = "(?:<ObjectBelonging>Adopted<\/ObjectBelonging>|<Comment>Adopted.([\w\W]*?)<\/Comment>)";

	Регексп = Новый РегулярноеВыражение(ПаттернНаследование);
	Регексп.Многострочный = Истина;
	Регексп.ИгнорироватьРегистр = Истина;

	НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		Результат.Наследование = Истина;
		Результат.Значение = НайденнаяСтрока.Группы[1].Значение;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Процедура СопоставитьМетодыРасширенияИКонфигурации(МетодыМодуляКонфигурации, ФайлМодуля, ИмяКонфигурации)

	Для каждого Метод Из МетодыМодуляКонфигурации Цикл // обход найденных методов

		Для каждого МетодРасширения Из ФайлМодуля.Методы Цикл // обход существующих переопределенных методов

			Если Метод.ИмяМетодаБезПрефикса = МетодРасширения.ИмяМетодаБезПрефикса Тогда

				МетодРасширения.Вставить(ИмяКонфигурации, Метод.ТелоМетода); 

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Добавлят в массив объект конфигурации, если он переопределен. Объект может состоять из нескольких файлов.
//
// Параметры:
//   ТипОбъектов - Строка - Тип объекта конфиурации (Catalogs, Documents и т.д.)
//   ФайлОбъекта - Файл - XML файл объекта конфигурации
//   РезультатОбъекты - Массив - в массив добавляются структуры с описанием файлов объекта
//
Процедура ДобавитьПереопределенныйОбъект(ТипОбъектов, ФайлОбъекта, РезультатОбъекты)

	Переопределение = ПрочитатьНаследованиеОбъекта(ФайлОбъекта);
	Если Переопределение.Наследование Тогда

		ДобОбъект = Новый Структура("Тип, Имя", ТипОбъектов, ФайлОбъекта.ИмяБезРасширения);

		ФайлыМодулей = ПолучитьФайлыМодулей(ДобОбъект.Тип, ДобОбъект.Имя);
		Если ФайлыМодулей.Количество() Тогда

			МассивФайлов = Новый Массив;
			Для Каждого ФайлМодуля Из ФайлыМодулей Цикл

				ФайлСтруктура = Новый Структура("ФайлМодуля", ФайлМодуля);
				Если Не ПустаяСтрока(Переопределение.Значение) И ФайлМодуля.Имя = "ObjectModule.bsl" Тогда
					ФайлСтруктура.Вставить("ИмяПереопределяемого", Переопределение.Значение);
				КонецЕсли;

				МассивФайлов.Добавить(ФайлСтруктура);
				
			КонецЦикла;

			ДобОбъект.Вставить("Модули", МассивФайлов);
			РезультатОбъекты.Добавить(ДобОбъект);
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////

Процедура ПриСозданииОбъекта(Путь = Неопределено)

	УстановитьПуть(Путь);

КонецПроцедуры
